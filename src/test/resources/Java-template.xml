<templateSet group="Java">
  <template name="psetm" value="public static $MODEL_CLASS_NAME$ of($MODEL_CLASS_NAME$Entity entity) {&#10;    return builder()&#10;            $BUILDER_BODY$$END$&#10;            .build();&#10;}" description="Generate model to entity converted base method" toReformat="true" toShortenFQNames="false">
    <variable name="MODEL_CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="BUILDER_BODY" expression="groovyScript(&quot;_1.split(System.lineSeparator()).collect { it -&gt; def tokens = it.split(); def varType = tokens[0]; def varName = tokens[1]; if (tokens.find { typeString -&gt; ['Collection', 'Set', 'List'].any { typeString.contains(it) } }) { return '.' + varName + '(remapToSet(entity.get' + varName.capitalize() + '(), ' + varType.substring(varType.indexOf('&lt;') + 1, varType.indexOf('&gt;')) + '::of))' } else { return '.' + varName + '(entity.get' + varName.capitalize() + '())' } }.join(System.lineSeparator())&quot;, clipboard())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="psmte" value="public static $ENTITY_CLASS_NAME$ of($MODEL_CLASS_NAME$ model) {&#10;    return builder()&#10;            $BUILDER_BODY$$END$&#10;            .build();&#10;}" description="Generate entity to model converted base method" toReformat="true" toShortenFQNames="false">
    <variable name="ENTITY_CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="MODEL_CLASS_NAME" expression="substringBefore(className(), &quot;Entity&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="BUILDER_BODY" expression="groovyScript(&quot;_1.split(System.lineSeparator()).collect { it -&gt; def tokens = it.split(); def varType = tokens[0]; def varName = tokens[1]; if (tokens.find { typeString -&gt; ['Collection', 'Set', 'List'].any { typeString.contains(it) } }) { return '.' + varName + '(remapToSet(model.get' + varName.capitalize() + '(), ' + varType.substring(varType.indexOf('&lt;') + 1, varType.indexOf('&gt;')) + '::of))' } else { return '.' + varName + '(model.get' + varName.capitalize() + '())' } }.join(System.lineSeparator())&quot;, clipboard())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="tmb" value="$BUILDER_BODY$$END$" description="" toReformat="true" toShortenFQNames="true">
    <variable name="BUILDER_BODY" expression="groovyScript(&quot;_1.split(System.lineSeparator()).collect { it.trim() }.findAll { !it.isEmpty() }.findAll { !it.startsWith('@') }.collect { it.replace(';', '') }.collect { it.replace('{', '') }.collect { it.trim() }.collect { it -&gt; def tokens = it.split(); def varName = tokens[1]; if (tokens.find { it == 'class' }) {def className = tokens[2]; return className + ' ' + className.uncapitalize() + '() {' + System.lineSeparator() + className + '.builder()'} else {return '.' + varName + '(' + varName + ')'}}.join(System.lineSeparator()) + System.lineSeparator() + '.build()' + System.lineSeparator() + '}'&quot;, clipboard()) " defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="GROOVY" value="true" />
    </context>
  </template>
  <template name="OPO" value="Optional.of($SELECTION$)" description="Surround with Optional.of" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="true" />
      <option name="JAVA_CODE" value="true" />
      <option name="SPOCK_SPECIFICATION" value="true" />
    </context>
  </template>
  <template name="OPON" value="Optional.ofNullable($SELECTION$)" description="Surround with Optional.ofNullable" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="true" />
      <option name="JAVA_CODE" value="true" />
      <option name="SPOCK_SPECIFICATION" value="true" />
    </context>
  </template>
</templateSet>